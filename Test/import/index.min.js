async function importRemoteUtils(n, t, i, r) {
  const u = (function () {
    return typeof globalThis != "undefined"
      ? globalThis
      : typeof self != "undefined"
      ? self
      : typeof window != "undefined"
      ? window
      : global;
  })();
  if ($.isNode()) {
    if (r) {
      $.debug(`【${i}】使用 'require' 导入模块 ${r}`);
      try {
        const n = require(r);
        $[i] = n;
        return;
      } catch (o) {
        $.error(
          `【${i}】导入模块 ${r} 失败, 请检查模块名或检查是否安装该依赖...`
        );
      }
    } else if (
      ($.debug(`【${i}】没有传入模块名称, 不使用 'require' 导入`), u[i])
    ) {
      $.debug(`【${i}】环境自带库, 已加载成功 🎉`);
      $[i] = u[i];
      return;
    }
    !$[i] || $.debug(`【${i}】使用远程加载...`);
  }
  $.debug(`【${i}】正在从远程拉取脚本: ${n}`);
  const f = $.getval(`${i}.js`),
    e = (n) => {
      eval(n),
        ($[i] = t ? eval(t)() : u[i]),
        !$[i] || $.debug(`【${i}】加载成功 🎉`);
    };
  f
    ? ($.debug(`【${i}】缓存存在, 尝试加载...`), e(f))
    : await $.http
        .get({ url: n, timeout: 2e3 })
        .then((n) => {
          var t = n.body;
          e(t);
          $.setval(t, `${i}.js`);
          $.debug(`【${i}】已存入缓存 🎉`);
        })
        .catch(() =>
          Promise.reject(new Error(`【${i}】远程拉取失败, 请检查网络...`))
        );
}
